<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gaming | minimaxir]]></title>
  <link href="minimaxir.com//gaming/atom.xml" rel="self"/>
  <link href="minimaxir.com/"/>
  <updated>2013-05-13T22:20:12-07:00</updated>
  <id>minimaxir.com/</id>
  <author>
    <name><![CDATA[Max Woolf]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diablo III Economy Broken by an Integer Overflow Bug]]></title>
    <link href="minimaxir.com/2013/05/stones-of-jordan/"/>
    <updated>2013-05-07T21:53:00-07:00</updated>
    <id>minimaxir.com/2013/05/stones-of-jordan</id>
    <content type="html"><![CDATA[<p><a href="http://us.battle.net/d3/en/">Diablo III</a>, Blizzard&rsquo;s highly-awaited online-only Action RPG released almost a year ago to the day, has had its share of technical difficulties. From <a href="http://knowyourmeme.com/memes/error-37">Error 37</a> to lag spikes that can cause hundreds of hours to go to waste, Blizzard has spent the past year improving the game backend to better accommidate the millions of active players.</p>

<p>Diablo III is also noted for its economy, with an emphasis on a region-wide auction house where players can trade one-in-a-million items for millions and billions of gold. (inflation is crazy). Additionally, Diablo III emphasized the use of a Real World Auction House, where players can sell gold or items for real world cash.</p>

<p>Today was the launch of <a href="http://us.battle.net/d3/en/blog/9647272/patch-108-now-live-5-7-2013">Patch 1.0.8</a>, a patch which promised improvements to character progression. After spending a few weeks on a Public Test Realm, where players volunteered to tested the patch to ensure that there were game-breaking exploits, the patch released successfully.</p>

<p>Except for one patch note that was added last minute and not tested in the PTR. And it&rsquo;s a patch note that broke the economy to tiny pieces.</p>

<!-- more -->


<p>The patch notes from the final build contained this change:</p>

<blockquote><p>The stack size for gold sales on the auction house has been increased from 1 million to 10 million.</p></blockquote>

<p>Normally, on the Real Money Auction House, the player can only sell money in 1 million gold increments. In 1.0.8, the player can sell it in 10 million increments. So, what happens when the player tries putting an absurd amount of money on the Auction House?</p>

<p>Reddit user tyropro <a href="http://www.reddit.com/r/Diablo/comments/1dx3wv/some_speculation_on_how_the_gold_bug_made_it_to/">has a nice explanation</a>:</p>

<blockquote><p>The gold &ldquo;dupe&rdquo; involved creating a RMAH auction for billions of gold while staying under the $250 limit. The example I saw in a video was 6 billion gold (600 x 10,000,000 at $0.39 per stack, for $234). When they posted this auction only ~1.7 billion appeared to be for sale, with the rest &ldquo;missing&rdquo; until they sent it to their stash and ended up with more than they started with. The exact numbers from a duping video:</p>

<pre><code>Create RMAH auction for:            6,000,000,000 gold
Auction shows up as:                1,705,032,704 gold
This much is missing!               4,294,967,296 gold
The missing amount, divided by 2:   2,147,483,648 gold
</code></pre>

<p>2,147,483,648 (or 231) is the maximum value you can store in an int32 in programming. I&rsquo;m no programmer, but I took one class in high school and was taught about the limits of different variable types. See:</p>

<p>Simply put, their RMAH gold selling code wasn&rsquo;t written to handle numbers over 2,147,483,648 properly, and the result was duplicate gold being added to people&rsquo;s stashes.</p></blockquote>

<p>4,294,967,296 is also 232, or the bound on an <a href="https://en.wikipedia.org/wiki/Integer_(computer_science)#Common_long_integer_sizes">unsigned integer</a>, which would be an interesting implementation choice on Blizzard&rsquo;s part.</p>

<p>And so, the dupers created these 6-billion-gold auctions which only appears to sell as 1.7 billion (and therefore only had 1.7 billion deducted from the current balance), canceled them, and were fully refunded the 6 billion for a net profit of the difference (4.2 billion). Repeat <em>ad nauseum</em>.</p>

<p>A popular game streamer showed off the exploit. Other streamers followed. It was easily reproducible and <a href="http://www.reddit.com/r/Diablo/comments/1dw9kr/there_is_a_gold_dupe_on_na_currently_this_is_the/">everyone knew how to reproduce it</a>.</p>

<p>Hilarity ensued.</p>

<p><img src="/img/diablo31.png" alt="diablo31" /></p>

<p>Yes, that&rsquo;s 420 <em>billion</em> gold.</p>

<p>After buying up all the duped items in the Auction House, the items were then sold on the Real Money Auction House. For real money. And people bought them.</p>

<p>This is the definition of a worst-case scenario for Diablo III. All because of an untested patch note. What could Blizzard do? Performing a roll-back would wipe all progress obtained by players for the patch day, which would result in a lot of bad PR. But leaving the economy as-is will devalue all items in the game (and Diablo III is all about getting items).</p>

<p>In the end, Blizzard <a href="http://www.reddit.com/r/Diablo/comments/1dx4a7/there_will_officially_be_no_rollback_after_the/">has not done a roll-back</a>, but instead <a href="http://www.reddit.com/r/Diablo/comments/1dwk6x/d3_inigomontoya_just_got_banned_for_real/">banned anyone who duped</a>, and <a href="http://i.imgur.com/x5S9Zcx.png">refunded</a> anyone who spent real money. The bug was temporarily fixed by reverting the patch note which caused the entire mess.</p>

<p>Let this be a lesson on what happens when you include an untested change at the last minute. You could break an entire economy. Eh, no big deal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Super Mario World "Completed" in Under 3 Minutes by Corrupting the RAM]]></title>
    <link href="minimaxir.com/2013/03/127-yoshis-in-slot-6/"/>
    <updated>2013-03-24T21:44:00-07:00</updated>
    <id>minimaxir.com/2013/03/127-yoshis-in-slot-6</id>
    <content type="html"><![CDATA[<p>Watch the video above, you won&rsquo;t regret it. (the fun part starts at 1:12)</p>

<p>This is a <a href="http://tasvideos.org/">Tool-Assisted Speed Run</a>  (TAS) of the Super Nintendo classic Super Mario World. TASes use an emulator to perform optimal game actions with frame-by-frame precision in order to complete the game in the lowest amount of time, and can use &ldquo;save states&rdquo;  to reverse any gameplay mistakes. Games on older consoles frequently have glitches that require such precision that consequently are very difficult to perform on a console consistently, making TASes more of an art form than actual gameplay advice.</p>

<!-- more -->


<p>So, what the heck is happening in this speedrun? curtmack on Reddit <a href="http://www.reddit.com/r/Games/comments/1aldvz/major_glitch_discovered_in_luigis_mansion_that/c8yk3g3">explains it succinctly</a>:</p>

<blockquote><p>So, for those who are wondering just what the f- happened&hellip; there&rsquo;s a glitch that&rsquo;s been known for a while, where Yoshi can end up in the &ldquo;I have an item in my mouth&rdquo; state, but not actually have an item in his mouth. When he spits out this nothingness, the game crashes. That&rsquo;s all we knew about the glitch&hellip; until recently.</p>

<p>Somebody decided to take a debugging emulator and step through the crash. He discovered that the crash occurred because the game tried to jump to a specific address in memory, and execute code there. That address did not contain code, and so the system crashed.</p>

<p>But wait a second. What if, by some sheer coincidence, that address <em>did</em> contain code? The specific address dropped him in somewhere amongst various data for the game&rsquo;s internal random number generator, and the random number generator can be manipulated in a TAS. Could the game be coerced into running arbitrary code?</p>

<p>Well, as it turns out, it&rsquo;s extremely limited. You have the RNG state and a few sprite positions that can be manipulated, but after that is some internal game stuff that can&rsquo;t be. So the length of the &ldquo;program&rdquo; is extremely limited, but as it turns out, it&rsquo;s just long enough to send the signal to the game to switch to the &ldquo;The End&rdquo; screen.</p>

<p>There&rsquo;s a related glitch where you can spawn a bouncing fish by doing certain odd things as you spit out an item as Yoshi, and every time a fish bounces, it uses up a randomly-generated number (since it bounces in a random direction). So, putting it all together, you have to spawn a billion fish and have them all bounce a f-jillion times to get the RNG in just the right spot, leave the area, and then fiddle around with some objects to get the last few bits you need in the right place, all while setting up the original spit-nothing glitch in the first place.</p></blockquote>

<p>Crazy, isn&rsquo;t it?</p>

<h2>I Call Hax!</h2>

<p>This <a href="http://tasvideos.org/1945M.html">SMW TAS</a>, posted in 2011, was so crazy that it inspired the creation of a new category of speed runs: &ldquo;Corrupts Memory.&rdquo; The <a href="http://tasvideos.org/forum/viewtopic.php?t=12215">discussion on the speed run</a> provides a technical explanation of of the glitch, which started a debate: &ldquo;does this <em>count</em> as a speed run?&rdquo; (96% of voters said yes.)</p>

<p><img src="http://i1.wp.com/minimaxir.com/wp-content/uploads/2013/03/smw.png?resize=625%2C227" alt="smw" /></p>

<p>To be fair, this is far from the first time where manipulated RAM has been used to complete a game. The classic Nintendo 64 title Legend of Zelda: Ocarina of Time has the infamous <a href="http://zeldaspeedruns.com/oot/ba/reverse-bottle-adventure">Reverse Bottle glitch</a> that allows players to transform items into others, and a <a href="http://youtu.be/PaUCFrW_mEE?t=13m44s">memory glitch</a> that teleports you from the first dungeon to the final cutscene, In <em>Pokemon</em> on the GameBoy, players discovered how to reprogram the game to <a href="http://tasvideos.org/forum/viewtopic.php?p=332488&amp;sid=1d8670bd80327418d202b6608e5cd2a9#332488">run arbitrary code</a>, but many gamers may remember the classic <a href="http://bulbapedia.bulbagarden.net/wiki/Missingno.">Missingno glitch</a>, which was very easy to reproduce on an actual console and provided many beneficial effects.</p>

<p>Still, it&rsquo;s not every day that spawning a ton of fishes out of mid-air = victory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Electronic Arts "Gives Away" Thousands Of Free Games Due To No Server-Side Validation]]></title>
    <link href="minimaxir.com/2012/10/client-side-validation-is-hard-mode/"/>
    <updated>2012-10-14T21:21:00-07:00</updated>
    <id>minimaxir.com/2012/10/client-side-validation-is-hard-mode</id>
    <content type="html"><![CDATA[<p>Early Saturday morning, <a href="http://www.gamefaqs.com/boards/916373-pc/64312901">various gaming forums</a> (and, more importantly, <a href="http://www.reddit.com/r/GameDeals/comments/11ewb0/use_the_code_os3874xvc_to_get_20_off_origin/">Reddit</a>) obtained a promotional code from mega gaming company Electronic Arts for their Origin gaming distribution service. This code entitled the user to purchase any EA published or developed game for $20 off, and if the game was less than $20, the game was free. <a href="http://www.gamers-association.com/2012/10/free-game-from-eas-origin/">Games that were made free</a> using this coupon included hit series such as Dead Space, Mass Effect, Dragon Age, and Battlefield, so the rewards for the coupon were actually pretty worthwhile. Best of all, there are no catches and no gimmicks; input promo code OS3874XVC, get game.</p>

<p>The code was apparently rewarded after taking a survey regarding Origin, with the reward being one free game. The operative word being &ldquo;one.&rdquo; Some gamers, out of curiosity, discovered that by entering the code via both the store browser-interface and the store client-interface, they could get a free game twice. Gamers inferred the logical technical conclusion; EA was not checking server-side that the code was only being used once. Later, gamers noted that <a href="http://www.overclock.net/t/1315674/free-20-in-origin-code/410#post_18359737">simply inputting the code while logged-out</a> allows them to use the promo code an <em>unlimited</em> amount of times.</p>

<p>Needless to say, hilarity ensued.</p>

<!-- more -->


<h2>What Went Wrong</h2>

<p><a href="http://i0.wp.com/minimaxir.com/wp-content/uploads/2012/10/origin2.png"><img src="http://i0.wp.com/minimaxir.com/wp-content/uploads/2012/10/origin2.png" alt="A picture of the Origin desktop client. Not as pretty as a startup website." /></a></p>

<p>Even the most amateur web developer knows to follow three important rules for data validation:</p>

<ol>
<li>Never trust the client.</li>
<li>Never trust the client.</li>
<li><strong>Never trust the damn client!</strong></li>
</ol>


<p>The proper way to implement a promo code is logical: when the user attempts to apply a promo code, the server checks, <em>has the user used this promo code before?</em> by querying<em> SELECT FROM transactions WHERE user_id = current_user AND promo_code = &ldquo;OS3874XVC&rdquo;</em>. If the result set is empty, then the user hasn&rsquo;t used the code, and everything&rsquo;s good to go. Otherwise, then that user has used the promo code before, and an appropriate error should be thrown are displayed to the user. This would be repeated at the checkout phase when the server actually charges the credit card, to ensure that the correct amount is charged and that the user has not committed and shenanigans in the meantime. All would be well. *****</p>

<p>For some reason, inputting the code in different clients (which should validate against the same backend database) still allowed the code to be input twice. And, for a very confusing reason, a workflow exists that allows the user to input a promo code while logged out, with presumably the intention of it being validated when the user eventually logs in (which it isn&rsquo;t).</p>

<h2>Aftermath</h2>

<p><a href="http://www.forbes.com/sites/erikkain/2012/04/09/why-ea-won-the-worst-company-in-america-award/"><img src="http://www.forbes.com/sites/erikkain/2012/04/09/why-ea-won-the-worst-company-in-america-award/" alt="Two wrongs make a right...?" /></a></p>

<p>The exploit was closed at around 1AM PST, 18 hours after its discovery (which, to be honest, it pretty embarrassing for an exploit that causes a significant amount of lost potential revenue). Here&rsquo;s where it gets interesting.</p>

<p>A little background: in the gaming community, EA is not the most liked company; in fact, it was voted <a href="http://www.forbes.com/sites/erikkain/2012/04/09/why-ea-won-the-worst-company-in-america-award/">the worst company in America</a> due to a very large number of privacy, security, and ethical debacles. Last year, EA launched its own digital distribution service, Origin, which would compete with Valve&rsquo;s Steam service by being the sole provider of high-profile EA-published games, including Battlefield 3 and Mass Effect 3. (the former being the only reason I downloaded Origin). Speaking from experience, Origin is very buggy and unpolished compared to Steam, and actually drains system resources when idle.</p>

<p>According to <a href="http://www.reddit.com/r/gaming/comments/11ggi2/reddit_during_the_recent_origin_discount_coupon/">another Reddit thread</a>, when news of this exploit hit, many gamers went on a downloading spree, and downloaded nearly every free game possible for two reasons. One, if EA is technically incompetent enough to allow such a severe bug to exist, they won&rsquo;t have the technical skills to discern who used the promo code more than once. Two, <em>it is retribution for EA being a terrible company</em>.</p>

<p>What will EA do to punish people who exploited? Are the users at fault here since it&rsquo;s very possible to accidently use the code twice? If so, is it fair to ban <em>ever</em>y<em>one</em> who has used multiple promo codes if innocent people might be banned?</p>

<p>UPDATE (10/15 1:14AM): EA will <a href="http://forum.ea.com/eaforum/posts/list/60/9040620.page">&ldquo;honor all sales made with the coupon code,&rdquo;</a>  implying that they will <strong>not</strong> ban people who utilized the exploit.</p>

<p>If the promo was a marketing tactic from Electronic Arts to promote Origin usage, it failed immensely on their end, due to a trivial amount missing lines of code on their server.</p>

<p>-Max</p>

<p><em>PS: I downloaded exactly one game through the promo code as was intended and stated by a <a href="http://i.imgur.com/4zg7X.jpg">forum user&rsquo;s chat log with Origin Support</a>; I did not attempt to reproduce the exploit itself for verification purposes due to the potential consequences. I like my Battlefield 3!</em></p>

<ul>
<li><strong>I admit that the SQL pseudocode provided here is an oversimplified, general </strong>solution for the validation issue<strong>, since that I do not have knowledge of EA&rsquo;s database structure and scale.</strong></li>
</ul>


<p><strong>** Discussion on Hacker News <a href="http://news.ycombinator.com/item?id=4652129">here</a>!</strong></p>

<p><strong>*</strong>| Discussion on Reddit <a href="http://www.reddit.com/r/technology/comments/11hem0/electronic_arts_gives_away_thousands_of_free/">here</a> and <a href="http://www.reddit.com/r/Games/comments/11h9nj/electronic_arts_gives_away_thousands_of_free/">here</a>.**</p>
]]></content>
  </entry>
  
</feed>
